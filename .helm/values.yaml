image:
  # Repository to pull the image from
  repository: "ghcr.io/sneaksanddata/nexus-supervisor"
  
  # Tag to pull (defaults to the chart appVersion)
  tag: ""
  
  # Image pull policy
  pullPolicy: "IfNotPresent"

# Image pull secrets for private repositories
imagePullSecrets: []

# Override the application name
nameOverride: ""

# Fullname override
fullnameOverride: ""

# Service account configuration
serviceAccount:
  
  # Specifies whether a service account should be created
  create: true
  
  # Annotations to add to the service account
  annotations: {}
  
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  
### Role Based Access Control configuration
rbac:
  
  # Specifies whether RBAC resources should be created
  clusterRole:
        
    # Allows Nexus to manage its custom resources in the installation namespace
    supervisor:
      additionalLabels: {}
      additionalAnnotations: {}
      create: true
      nameOverride: ""
      
  
  # This parameter determines whether role binding resources need to be created.
  # If you have any roles in your configuration set to 'true', then this parameter for creating role binding resources
  # should also be set to 'true'.
  clusterRoleBindings:
    additionalLabels: {}
    additionalAnnotations: {}
    create: true  
    
# Additional labels for the deployment and pods
additionalLabels: {}
# Example:
#
#  app.my-company.com/component: ncc

# Additional labels for the deployment and pods
additionalAnnotations: {}
  # Example:
  #  app.my-company.com/application: nexus

# Extra environment variables to set in the deployment
extraEnv: {}
# Example:
#
#  - name: NEXUS__RESOURCE_NAMESPACE
#    value: nexus

# Extra environment variables referencing a ConfigMap or Secret
extraEnvFrom: {}
# Example:
#
#  envFrom:
#    - configMapRef:
#        name: custom-api-access-token
  
# Extra volumes to add to the deployment
extraVolumes: {}
  # Example:
  # 
  #  - name: data-volume
  #    emptyDir:
  #      sizeLimit: 500Mi
    
# Extra volumes to add to the deployment
extraVolumeMounts: {}
# Example:
#
#  - mountPath: /data
#    name: data-volume

# Resources constraints. By default, the operator does not specify any constraints to allow for easier deployment
resources: {}
# Example:
#
#  requests:
#    cpu: 1
#    memory: 1Gi
#  limits:
#    cpu: 1
#    memory: 1Gi

# Node labels for pod assignment
tolerations: { }

# Node labels for pod assignment
affinity: { }

# Security context settings for the container
# Note that default image is distroless and runs as non-root user by default.
securityContext: {}

# Logging configuration
logging:
  level: INFO
  
# Nexus Supervisor configurations
supervisor:
  
  # Number of supervisor replicas. Increase to support higher (1000+) pod numbers
  replicas: 1
         
  # Individual settings can be overridden using environment variables
  # Whole config can also be overridden by setting config.enabled=false and mounting a new appconfig.yaml to /app path in the container
  config:   
    enabled: true
    # Main resource namespace
    # Override with: NEXUS__RESOURCE_NAMESPACE
    resourceNamespace: "nexus"
    
    # optional path to kubeconfig for the controller cluster
    # defaults to in-cluster config
    # in the majority of cases you should leave this blank
    # Override with: NEXUS__KUBE_CONFIG_PATH      
    kubeConfigPath: ""    
      
    processing:
           
      # Failure backoff base delay. Example values: 5ms, 5s
      # Override with: NEXUS__FAILURE_RATE_BASE_DELAY
      failureRateBaseDelay: 100ms
      
      # Failure backoff max delay. Example values: 5s, 1m
      # Override with: NEXUS__FAILURE_RATE_MAX_DELAY      
      failureRateMaxDelay: 1s
      
      # Rate limit elements per second
      # Override with: NEXUS__RATE_LIMIT_ELEMENTS_PER_SECOND      
      rateLimitElementsPerSecond: 10
      
      # Rate limit burst elements
      # Override with: NEXUS__RATE_LIMIT_ELEMENTS_BURST      
      rateLimitElementsBurst: 100
      
      # Number of workers to use when buffering inputs
      # Override with: NEXUS__WORKERS      
      workers: 2    
    
    cqlStore:
      # type of CqlStore to use. Support options: `astra`, `scylla`
      type: astra
      # Enable mounting Cassandra credentials from a secret
      secretRefEnabled: true
      
      # Name of a secret containing Cassandra credentials
      # Example content:
      #  apiVersion: v1
      #  kind: Secret
      #  metadata:
      #    name: cassandra-credentials
      #    namespace: nexus
      #  data:
      #    AstraDB specific setting, contains base64-encoded bundle zip. Leave empty for other Cassandra installations
      #    Support for Scylla and Apache OSS (generic Cassandra) is coming in the production release
      #    NEXUS__CQL_STORE__SECURE_CONNECTION_BUNDLE_BASE64: base64value
      #    NEXUS__CQL_STORE__GATEWAY_USER: user
      #    NEXUS__CQL_STORE__GATEWAY_PASSWORD: password
      #  type: Opaque
      
      secretName: ""

    
# Observability settings for Datadog
datadog:
  
  # if enabled, will set Datadog-specific environment variables on the container 
  enabled: false
  
  # Datadog endpoint to sink logs to
  endpoint: "datadoghq.eu"
  
  # Name for a Secret resource that contains Datadog API Key to use for log submissions
  apiKeySecret: "secretName"

  # Key in the secret that contains datadog api key    
  apiKeySecretKey: "secretKey"
  
  # Datadog Service Name parameter
  serviceName: "nexus-supervisor"
  
  # value to use as a DogStatsd server url
  # Examples: udp://127.0.0.1:8125 or unix:///path/to/dsd.socket
  # https://github.com/DataDog/datadog-go?tab=readme-ov-file#unix-domain-sockets-client
  statsdUrl: unix:///var/run/datadog/dsd.socket
  
  # enables metric origin detection by setting DD_ENTITY_ID
  enableOriginDetection: true
  